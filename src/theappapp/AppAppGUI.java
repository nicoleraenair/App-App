/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package theappapp;

import java.awt.CardLayout;
import java.awt.Dialog.ModalityType;
import java.util.Date;
import java.util.ArrayList;

import java.io.*;

import javax.swing.JDialog;
import javax.swing.table.TableColumn;
import java.lang.Boolean;

import java.io.File; 
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InvalidClassException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 *
 * @author Nicole
 */
public class AppAppGUI extends javax.swing.JFrame implements Serializable{

    private Applicant user = new Applicant();

    
    /**
     * Creates new form AppAppGUI
     */
    public AppAppGUI() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createUniDialog = new javax.swing.JDialog();
        uniDialogPnl = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        nicknameField = new javax.swing.JTextField();
        decriptionScrollPane = new javax.swing.JScrollPane();
        descriptionField = new javax.swing.JTextArea();
        nameLbl = new javax.swing.JLabel();
        nicknameLbl = new javax.swing.JLabel();
        descLbl = new javax.swing.JLabel();
        commonAppLbl = new javax.swing.JLabel();
        uniDialogLbl = new javax.swing.JLabel();
        saveNewUniBtn = new javax.swing.JButton();
        commonAppField = new javax.swing.JTextField();
        cancelBtn = new javax.swing.JButton();
        createTaskDialog = new javax.swing.JDialog();
        taskDialogPnl = new javax.swing.JPanel();
        taskDialogLbl = new javax.swing.JLabel();
        taskDescLbl = new javax.swing.JLabel();
        taskDescField = new javax.swing.JTextField();
        taskDueDateLbl = new javax.swing.JLabel();
        taskMthComboBox = new javax.swing.JComboBox<>();
        taskDayComboBox = new javax.swing.JComboBox<>();
        taskYrComboBox = new javax.swing.JComboBox<>();
        taskCatLbl = new javax.swing.JLabel();
        taskCatField = new javax.swing.JTextField();
        saveTaskBtn = new javax.swing.JButton();
        cancelTaskBtn = new javax.swing.JButton();
        createAppDialog = new javax.swing.JDialog();
        appDialogPnl = new javax.swing.JPanel();
        appNameField = new javax.swing.JTextField();
        appNicknameField = new javax.swing.JTextField();
        appDecriptionScrollPane = new javax.swing.JScrollPane();
        descriptionField1 = new javax.swing.JTextArea();
        appNameLbl = new javax.swing.JLabel();
        appNicknameLbl = new javax.swing.JLabel();
        appDescLbl = new javax.swing.JLabel();
        appDueDateLbl = new javax.swing.JLabel();
        appDialogLbl = new javax.swing.JLabel();
        appSaveBtn = new javax.swing.JButton();
        appCancelBtn = new javax.swing.JButton();
        appMthComboBox = new javax.swing.JComboBox<>();
        appDayComboBox = new javax.swing.JComboBox<>();
        appYrComboBox = new javax.swing.JComboBox<>();
        createScholDialog = new javax.swing.JDialog();
        scholDialogPnl = new javax.swing.JPanel();
        scholNameField = new javax.swing.JTextField();
        scholNicknameField = new javax.swing.JTextField();
        scholDescriptionScrollPane = new javax.swing.JScrollPane();
        descriptionField2 = new javax.swing.JTextArea();
        schoNameLbl = new javax.swing.JLabel();
        scholNicknameLbl = new javax.swing.JLabel();
        scholDescLbl = new javax.swing.JLabel();
        scholDueDateLbl = new javax.swing.JLabel();
        scholDialogLbl = new javax.swing.JLabel();
        scholSaveBtn = new javax.swing.JButton();
        scholCancelBtn = new javax.swing.JButton();
        scholMthComboBox = new javax.swing.JComboBox<>();
        scholDayComboBox = new javax.swing.JComboBox<>();
        scholYrComboBox = new javax.swing.JComboBox<>();
        errorDialog = new javax.swing.JDialog();
        errorPnl = new javax.swing.JPanel();
        errorText = new javax.swing.JLabel();
        errorOKBtn = new javax.swing.JButton();
        basePnl = new javax.swing.JPanel();
        allTasksBtn = new javax.swing.JButton();
        mainSepLine = new javax.swing.JSeparator();
        unisBtn = new javax.swing.JButton();
        commonBtn = new javax.swing.JButton();
        scholBtn = new javax.swing.JButton();
        parentPnl = new javax.swing.JPanel();
        tasksPnl = new javax.swing.JPanel();
        allTasksLbl = new javax.swing.JLabel();
        completedBtn = new javax.swing.JButton();
        upcomingBtn = new javax.swing.JButton();
        overdueBtn = new javax.swing.JButton();
        tasksParentPnl = new javax.swing.JPanel();
        completedPnl = new javax.swing.JPanel();
        completedScrollPane = new javax.swing.JScrollPane();
        completedTable = new javax.swing.JTable();
        completedDltBtn = new javax.swing.JButton();
        completedSaveBtn = new javax.swing.JButton();
        overduePnl = new javax.swing.JPanel();
        overdueScrollPane = new javax.swing.JScrollPane();
        overdueTable = new javax.swing.JTable();
        overdueDltBtn = new javax.swing.JButton();
        overdueSaveBtn = new javax.swing.JButton();
        upcomingPnl = new javax.swing.JPanel();
        upcomingScrollPane = new javax.swing.JScrollPane();
        upcomingTable = new javax.swing.JTable();
        upcomingDltBtn = new javax.swing.JButton();
        upcomingSaveBtn = new javax.swing.JButton();
        addTaskBtn = new javax.swing.JButton();
        unisPnl = new javax.swing.JPanel();
        unisLbl = new javax.swing.JLabel();
        uniListBtn = new javax.swing.JButton();
        searchUnisBtn = new javax.swing.JButton();
        unisParentPnl = new javax.swing.JPanel();
        uniListPnl = new javax.swing.JPanel();
        uniListScrollPane = new javax.swing.JScrollPane();
        uniListTable = new javax.swing.JTable();
        uniListDltBtn = new javax.swing.JButton();
        searchUnisPnl = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        srchScrollPane = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        searchDltBtn = new javax.swing.JButton();
        addUniBtn = new javax.swing.JButton();
        appsPnl = new javax.swing.JPanel();
        appsLbl = new javax.swing.JLabel();
        addAppBtn = new javax.swing.JButton();
        appScrollPane = new javax.swing.JScrollPane();
        appTable = new javax.swing.JTable();
        appDltBtn = new javax.swing.JButton();
        scholPnl = new javax.swing.JPanel();
        scholLbl = new javax.swing.JLabel();
        addScholBtn = new javax.swing.JButton();
        scholScrollPane = new javax.swing.JScrollPane();
        scholTable = new javax.swing.JTable();
        scholDltBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        loadDataBtn = new javax.swing.JButton();

        createUniDialog.setMinimumSize(new java.awt.Dimension(560, 260));

        uniDialogPnl.setBackground(new java.awt.Color(255, 255, 255));

        nameField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N

        nicknameField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        nicknameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicknameFieldActionPerformed(evt);
            }
        });

        descriptionField.setColumns(20);
        descriptionField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        descriptionField.setRows(5);
        decriptionScrollPane.setViewportView(descriptionField);

        nameLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        nameLbl.setText("Name:");

        nicknameLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        nicknameLbl.setText("Nickname:");

        descLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        descLbl.setText("Description/Additional Information:");

        commonAppLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        commonAppLbl.setText("Common Application (if any):");

        uniDialogLbl.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        uniDialogLbl.setText("Add University");

        saveNewUniBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        saveNewUniBtn.setText("Save");
        saveNewUniBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewUniBtnActionPerformed(evt);
            }
        });

        commonAppField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        commonAppField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commonAppFieldActionPerformed(evt);
            }
        });

        cancelBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout uniDialogPnlLayout = new javax.swing.GroupLayout(uniDialogPnl);
        uniDialogPnl.setLayout(uniDialogPnlLayout);
        uniDialogPnlLayout.setHorizontalGroup(
            uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uniDialogPnlLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uniDialogPnlLayout.createSequentialGroup()
                        .addComponent(uniDialogLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(uniDialogPnlLayout.createSequentialGroup()
                        .addGroup(uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(uniDialogPnlLayout.createSequentialGroup()
                                .addComponent(nameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(commonAppLbl)
                            .addGroup(uniDialogPnlLayout.createSequentialGroup()
                                .addComponent(nicknameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(commonAppField, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(26, 26, 26)
                        .addGroup(uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(descLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(decriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap(27, Short.MAX_VALUE))))
            .addGroup(uniDialogPnlLayout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(cancelBtn)
                .addGap(18, 18, 18)
                .addComponent(saveNewUniBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        uniDialogPnlLayout.setVerticalGroup(
            uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uniDialogPnlLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(uniDialogLbl)
                .addGroup(uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uniDialogPnlLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLbl)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descLbl))
                        .addGap(5, 5, 5)
                        .addGroup(uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nicknameLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commonAppLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commonAppField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uniDialogPnlLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(decriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(uniDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveNewUniBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout createUniDialogLayout = new javax.swing.GroupLayout(createUniDialog.getContentPane());
        createUniDialog.getContentPane().setLayout(createUniDialogLayout);
        createUniDialogLayout.setHorizontalGroup(
            createUniDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(uniDialogPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        createUniDialogLayout.setVerticalGroup(
            createUniDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(uniDialogPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        createTaskDialog.setMinimumSize(new java.awt.Dimension(361, 248));

        taskDialogPnl.setBackground(new java.awt.Color(255, 255, 255));
        taskDialogPnl.setMinimumSize(new java.awt.Dimension(361, 228));

        taskDialogLbl.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        taskDialogLbl.setText("Add Task");

        taskDescLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskDescLbl.setText("Description:");

        taskDescField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskDescField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskDescFieldActionPerformed(evt);
            }
        });

        taskDueDateLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskDueDateLbl.setText("Due Date:");

        taskMthComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskMthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        taskDayComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskDayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        taskYrComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskYrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2019", "2020" }));
        taskYrComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskYrComboBoxActionPerformed(evt);
            }
        });

        taskCatLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskCatLbl.setText("Category (University/Scholarship/Common Application):");

        taskCatField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        taskCatField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskCatFieldActionPerformed(evt);
            }
        });

        saveTaskBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        saveTaskBtn.setText("Save");
        saveTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTaskBtnActionPerformed(evt);
            }
        });

        cancelTaskBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        cancelTaskBtn.setText("Cancel");
        cancelTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTaskBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout taskDialogPnlLayout = new javax.swing.GroupLayout(taskDialogPnl);
        taskDialogPnl.setLayout(taskDialogPnlLayout);
        taskDialogPnlLayout.setHorizontalGroup(
            taskDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskDialogPnlLayout.createSequentialGroup()
                .addGroup(taskDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(taskDialogPnlLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(taskDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(taskCatLbl)
                            .addGroup(taskDialogPnlLayout.createSequentialGroup()
                                .addComponent(taskDueDateLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(taskMthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(taskYrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(taskDialogLbl)
                            .addGroup(taskDialogPnlLayout.createSequentialGroup()
                                .addComponent(taskDescLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskDescField, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(taskCatField)))
                    .addGroup(taskDialogPnlLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(cancelTaskBtn)
                        .addGap(18, 18, 18)
                        .addComponent(saveTaskBtn)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        taskDialogPnlLayout.setVerticalGroup(
            taskDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskDialogPnlLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(taskDialogLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(taskDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskDescLbl)
                    .addComponent(taskDescField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(taskDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskDueDateLbl)
                    .addComponent(taskMthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taskDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taskYrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskCatLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskCatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(taskDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTaskBtn)
                    .addComponent(cancelTaskBtn))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout createTaskDialogLayout = new javax.swing.GroupLayout(createTaskDialog.getContentPane());
        createTaskDialog.getContentPane().setLayout(createTaskDialogLayout);
        createTaskDialogLayout.setHorizontalGroup(
            createTaskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
            .addGroup(createTaskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(taskDialogPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        createTaskDialogLayout.setVerticalGroup(
            createTaskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 228, Short.MAX_VALUE)
            .addGroup(createTaskDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(createTaskDialogLayout.createSequentialGroup()
                    .addComponent(taskDialogPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        createAppDialog.setMinimumSize(new java.awt.Dimension(559, 260));

        appDialogPnl.setBackground(new java.awt.Color(255, 255, 255));
        appDialogPnl.setMinimumSize(new java.awt.Dimension(559, 250));
        appDialogPnl.setPreferredSize(new java.awt.Dimension(559, 250));

        appNameField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N

        appNicknameField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appNicknameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appNicknameFieldActionPerformed(evt);
            }
        });

        descriptionField1.setColumns(20);
        descriptionField1.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        descriptionField1.setRows(5);
        appDecriptionScrollPane.setViewportView(descriptionField1);

        appNameLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appNameLbl.setText("Name:");

        appNicknameLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appNicknameLbl.setText("Nickname:");

        appDescLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appDescLbl.setText("Description/Additional Information:");

        appDueDateLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appDueDateLbl.setText("Due Date:");

        appDialogLbl.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        appDialogLbl.setText("Add Common Application");

        appSaveBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appSaveBtn.setText("Save");
        appSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appSaveBtnActionPerformed(evt);
            }
        });

        appCancelBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appCancelBtn.setText("Cancel");
        appCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appCancelBtnActionPerformed(evt);
            }
        });

        appMthComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appMthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        appDayComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appDayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        appYrComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appYrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2019", "2020" }));
        appYrComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appYrComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout appDialogPnlLayout = new javax.swing.GroupLayout(appDialogPnl);
        appDialogPnl.setLayout(appDialogPnlLayout);
        appDialogPnlLayout.setHorizontalGroup(
            appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appDialogPnlLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appDialogPnlLayout.createSequentialGroup()
                        .addComponent(appDialogLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(appDialogPnlLayout.createSequentialGroup()
                        .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(appDialogPnlLayout.createSequentialGroup()
                                .addComponent(appNameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(appDueDateLbl)
                            .addGroup(appDialogPnlLayout.createSequentialGroup()
                                .addComponent(appNicknameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appNicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(appDialogPnlLayout.createSequentialGroup()
                                .addComponent(appMthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(appYrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(appDescLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(appDecriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap(22, Short.MAX_VALUE))))
            .addGroup(appDialogPnlLayout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(appCancelBtn)
                .addGap(18, 18, 18)
                .addComponent(appSaveBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        appDialogPnlLayout.setVerticalGroup(
            appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appDialogPnlLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(appDialogLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appNameLbl)
                    .addComponent(appNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appDescLbl))
                .addGap(5, 5, 5)
                .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appDialogPnlLayout.createSequentialGroup()
                        .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(appNicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appNicknameLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appDueDateLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(appMthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appYrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(appDecriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(appDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appSaveBtn)
                    .addComponent(appCancelBtn))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout createAppDialogLayout = new javax.swing.GroupLayout(createAppDialog.getContentPane());
        createAppDialog.getContentPane().setLayout(createAppDialogLayout);
        createAppDialogLayout.setHorizontalGroup(
            createAppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createAppDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(appDialogPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        createAppDialogLayout.setVerticalGroup(
            createAppDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(appDialogPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        createScholDialog.setMinimumSize(new java.awt.Dimension(559, 260));

        scholDialogPnl.setBackground(new java.awt.Color(255, 255, 255));
        scholDialogPnl.setMinimumSize(new java.awt.Dimension(559, 250));
        scholDialogPnl.setPreferredSize(new java.awt.Dimension(559, 250));

        scholNameField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N

        scholNicknameField.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholNicknameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scholNicknameFieldActionPerformed(evt);
            }
        });

        descriptionField2.setColumns(20);
        descriptionField2.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        descriptionField2.setRows(5);
        scholDescriptionScrollPane.setViewportView(descriptionField2);

        schoNameLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        schoNameLbl.setText("Name:");

        scholNicknameLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholNicknameLbl.setText("Nickname:");

        scholDescLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholDescLbl.setText("Description/Additional Information:");

        scholDueDateLbl.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholDueDateLbl.setText("Due Date:");

        scholDialogLbl.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        scholDialogLbl.setText("Add Scholarship Application");

        scholSaveBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholSaveBtn.setText("Save");
        scholSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scholSaveBtnActionPerformed(evt);
            }
        });

        scholCancelBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholCancelBtn.setText("Cancel");
        scholCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scholCancelBtnActionPerformed(evt);
            }
        });

        scholMthComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholMthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        scholDayComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholDayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        scholYrComboBox.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholYrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2019", "2020" }));

        javax.swing.GroupLayout scholDialogPnlLayout = new javax.swing.GroupLayout(scholDialogPnl);
        scholDialogPnl.setLayout(scholDialogPnlLayout);
        scholDialogPnlLayout.setHorizontalGroup(
            scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scholDialogPnlLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scholDialogPnlLayout.createSequentialGroup()
                        .addComponent(scholDialogLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(scholDialogPnlLayout.createSequentialGroup()
                        .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(scholDialogPnlLayout.createSequentialGroup()
                                .addComponent(schoNameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scholNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scholDueDateLbl)
                            .addGroup(scholDialogPnlLayout.createSequentialGroup()
                                .addComponent(scholNicknameLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scholNicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(scholDialogPnlLayout.createSequentialGroup()
                                .addComponent(scholMthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scholDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(scholYrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scholDescLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scholDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap(22, Short.MAX_VALUE))))
            .addGroup(scholDialogPnlLayout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(scholCancelBtn)
                .addGap(18, 18, 18)
                .addComponent(scholSaveBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        scholDialogPnlLayout.setVerticalGroup(
            scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scholDialogPnlLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(scholDialogLbl)
                .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(scholDialogPnlLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(schoNameLbl)
                            .addComponent(scholNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scholDescLbl))
                        .addGap(5, 5, 5)
                        .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scholNicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scholNicknameLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scholDueDateLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scholMthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scholDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scholYrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(scholDialogPnlLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(scholDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(scholDialogPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scholSaveBtn)
                    .addComponent(scholCancelBtn))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout createScholDialogLayout = new javax.swing.GroupLayout(createScholDialog.getContentPane());
        createScholDialog.getContentPane().setLayout(createScholDialogLayout);
        createScholDialogLayout.setHorizontalGroup(
            createScholDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createScholDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scholDialogPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        createScholDialogLayout.setVerticalGroup(
            createScholDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createScholDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scholDialogPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        errorDialog.setMinimumSize(new java.awt.Dimension(280, 140));

        errorPnl.setBackground(new java.awt.Color(255, 255, 255));
        errorPnl.setPreferredSize(new java.awt.Dimension(282, 40));

        errorText.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        errorText.setText("Invalid input to one or more fields.");

        errorOKBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        errorOKBtn.setText("OK");
        errorOKBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorOKBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout errorPnlLayout = new javax.swing.GroupLayout(errorPnl);
        errorPnl.setLayout(errorPnlLayout);
        errorPnlLayout.setHorizontalGroup(
            errorPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorPnlLayout.createSequentialGroup()
                .addGroup(errorPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(errorPnlLayout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(errorOKBtn))
                    .addGroup(errorPnlLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(errorText)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        errorPnlLayout.setVerticalGroup(
            errorPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorPnlLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(errorText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorOKBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout errorDialogLayout = new javax.swing.GroupLayout(errorDialog.getContentPane());
        errorDialog.getContentPane().setLayout(errorDialogLayout);
        errorDialogLayout.setHorizontalGroup(
            errorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(errorPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        errorDialogLayout.setVerticalGroup(
            errorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(errorPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        basePnl.setBackground(new java.awt.Color(255, 255, 255));

        allTasksBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        allTasksBtn.setText("All Tasks");
        allTasksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTasksBtnActionPerformed(evt);
            }
        });

        mainSepLine.setOrientation(javax.swing.SwingConstants.VERTICAL);

        unisBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        unisBtn.setText("Universities");
        unisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unisBtnActionPerformed(evt);
            }
        });

        commonBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        commonBtn.setText("Common Applications");
        commonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commonBtnActionPerformed(evt);
            }
        });

        scholBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholBtn.setText("Scholarships");
        scholBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scholBtnActionPerformed(evt);
            }
        });

        parentPnl.setBackground(new java.awt.Color(255, 255, 255));
        parentPnl.setLayout(new java.awt.CardLayout());

        tasksPnl.setBackground(new java.awt.Color(255, 255, 255));

        allTasksLbl.setFont(new java.awt.Font("Avenir", 0, 15)); // NOI18N
        allTasksLbl.setText("All Tasks");

        completedBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        completedBtn.setText("Completed");
        completedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completedBtnActionPerformed(evt);
            }
        });

        upcomingBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        upcomingBtn.setText("Upcoming");
        upcomingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upcomingBtnActionPerformed(evt);
            }
        });

        overdueBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        overdueBtn.setText("Overdue");
        overdueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overdueBtnActionPerformed(evt);
            }
        });

        tasksParentPnl.setLayout(new java.awt.CardLayout());

        completedTable.setRowHeight(30);
        completedTable.setShowVerticalLines(false);
        completedScrollPane.setViewportView(completedTable);

        completedDltBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        completedDltBtn.setText("Delete Selection");
        completedDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completedDltBtnActionPerformed(evt);
            }
        });

        completedSaveBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        completedSaveBtn.setText("Save Changes");
        completedSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completedSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout completedPnlLayout = new javax.swing.GroupLayout(completedPnl);
        completedPnl.setLayout(completedPnlLayout);
        completedPnlLayout.setHorizontalGroup(
            completedPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(completedPnlLayout.createSequentialGroup()
                .addGroup(completedPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(completedPnlLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(completedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(completedPnlLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(completedDltBtn)
                        .addGap(45, 45, 45)
                        .addComponent(completedSaveBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        completedPnlLayout.setVerticalGroup(
            completedPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(completedPnlLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(completedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(completedPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(completedDltBtn)
                    .addComponent(completedSaveBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tasksParentPnl.add(completedPnl, "completedPnl");

        overdueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        overdueTable.setRowHeight(30);
        overdueTable.setShowVerticalLines(false);
        overdueScrollPane.setViewportView(overdueTable);

        overdueDltBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        overdueDltBtn.setText("Delete Selection");
        overdueDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overdueDltBtnActionPerformed(evt);
            }
        });

        overdueSaveBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        overdueSaveBtn.setText("Save Changes");
        overdueSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overdueSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout overduePnlLayout = new javax.swing.GroupLayout(overduePnl);
        overduePnl.setLayout(overduePnlLayout);
        overduePnlLayout.setHorizontalGroup(
            overduePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overduePnlLayout.createSequentialGroup()
                .addGroup(overduePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(overduePnlLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(overdueScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(overduePnlLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(overdueDltBtn)
                        .addGap(52, 52, 52)
                        .addComponent(overdueSaveBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        overduePnlLayout.setVerticalGroup(
            overduePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overduePnlLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(overdueScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(overduePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(overdueDltBtn)
                    .addComponent(overdueSaveBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tasksParentPnl.add(overduePnl, "overduePnl");

        upcomingTable.setRowHeight(30);
        upcomingTable.setShowVerticalLines(false);
        upcomingScrollPane.setViewportView(upcomingTable);

        upcomingDltBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        upcomingDltBtn.setText("Delete Selection");
        upcomingDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upcomingDltBtnActionPerformed(evt);
            }
        });

        upcomingSaveBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        upcomingSaveBtn.setText("Save Changes");
        upcomingSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upcomingSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout upcomingPnlLayout = new javax.swing.GroupLayout(upcomingPnl);
        upcomingPnl.setLayout(upcomingPnlLayout);
        upcomingPnlLayout.setHorizontalGroup(
            upcomingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upcomingPnlLayout.createSequentialGroup()
                .addGroup(upcomingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(upcomingPnlLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(upcomingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(upcomingPnlLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(upcomingDltBtn)
                        .addGap(35, 35, 35)
                        .addComponent(upcomingSaveBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        upcomingPnlLayout.setVerticalGroup(
            upcomingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(upcomingPnlLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(upcomingScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(upcomingPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(upcomingDltBtn)
                    .addComponent(upcomingSaveBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tasksParentPnl.add(upcomingPnl, "upcomingPnl");

        addTaskBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        addTaskBtn.setText("+");
        addTaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tasksPnlLayout = new javax.swing.GroupLayout(tasksPnl);
        tasksPnl.setLayout(tasksPnlLayout);
        tasksPnlLayout.setHorizontalGroup(
            tasksPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksPnlLayout.createSequentialGroup()
                .addGroup(tasksPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tasksPnlLayout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(allTasksLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tasksPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tasksPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tasksParentPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tasksPnlLayout.createSequentialGroup()
                                .addComponent(completedBtn)
                                .addGap(75, 75, 75)
                                .addComponent(upcomingBtn)
                                .addGap(70, 70, 70)
                                .addComponent(overdueBtn)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tasksPnlLayout.setVerticalGroup(
            tasksPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tasksPnlLayout.createSequentialGroup()
                .addGroup(tasksPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tasksPnlLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(allTasksLbl))
                    .addComponent(addTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(tasksPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(completedBtn)
                    .addComponent(upcomingBtn)
                    .addComponent(overdueBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tasksParentPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        parentPnl.add(tasksPnl, "tasksPnl");

        unisPnl.setBackground(new java.awt.Color(255, 255, 255));

        unisLbl.setFont(new java.awt.Font("Avenir", 0, 15)); // NOI18N
        unisLbl.setText("Universities");

        uniListBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        uniListBtn.setText("University List");
        uniListBtn.setMaximumSize(new java.awt.Dimension(150, 29));
        uniListBtn.setMinimumSize(new java.awt.Dimension(150, 29));
        uniListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniListBtnActionPerformed(evt);
            }
        });

        searchUnisBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        searchUnisBtn.setText("Search Universities");
        searchUnisBtn.setMaximumSize(new java.awt.Dimension(150, 29));
        searchUnisBtn.setMinimumSize(new java.awt.Dimension(150, 29));
        searchUnisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUnisBtnActionPerformed(evt);
            }
        });

        unisParentPnl.setLayout(new java.awt.CardLayout());

        uniListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        uniListTable.setRowHeight(30);
        uniListTable.setRowMargin(0);
        uniListTable.setShowVerticalLines(false);
        uniListScrollPane.setViewportView(uniListTable);

        uniListDltBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        uniListDltBtn.setText("Delete Selection");
        uniListDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniListDltBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout uniListPnlLayout = new javax.swing.GroupLayout(uniListPnl);
        uniListPnl.setLayout(uniListPnlLayout);
        uniListPnlLayout.setHorizontalGroup(
            uniListPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uniListPnlLayout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addComponent(uniListDltBtn)
                .addGap(164, 164, 164))
            .addGroup(uniListPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uniListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        uniListPnlLayout.setVerticalGroup(
            uniListPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uniListPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uniListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uniListDltBtn)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        unisParentPnl.add(uniListPnl, "uniListPnl");

        searchLabel.setText("Search for a university by name or nickname:");

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        srchScrollPane.setViewportView(searchTable);

        searchDltBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        searchDltBtn.setText("Delete Selection");
        searchDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDltBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchUnisPnlLayout = new javax.swing.GroupLayout(searchUnisPnl);
        searchUnisPnl.setLayout(searchUnisPnlLayout);
        searchUnisPnlLayout.setHorizontalGroup(
            searchUnisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchUnisPnlLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(searchUnisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchUnisPnlLayout.createSequentialGroup()
                        .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBtn)
                        .addGap(12, 12, 12))
                    .addGroup(searchUnisPnlLayout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addContainerGap())))
            .addGroup(searchUnisPnlLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(searchDltBtn)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(searchUnisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchUnisPnlLayout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(srchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );
        searchUnisPnlLayout.setVerticalGroup(
            searchUnisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchUnisPnlLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchUnisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                .addComponent(searchDltBtn)
                .addGap(14, 14, 14))
            .addGroup(searchUnisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchUnisPnlLayout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(srchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(58, Short.MAX_VALUE)))
        );

        unisParentPnl.add(searchUnisPnl, "searchUnisPnl");

        addUniBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        addUniBtn.setText("+");
        addUniBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUniBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout unisPnlLayout = new javax.swing.GroupLayout(unisPnl);
        unisPnl.setLayout(unisPnlLayout);
        unisPnlLayout.setHorizontalGroup(
            unisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unisPnlLayout.createSequentialGroup()
                .addGroup(unisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(unisPnlLayout.createSequentialGroup()
                        .addGroup(unisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(unisPnlLayout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addComponent(unisLbl))
                            .addGroup(unisPnlLayout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(searchUnisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(unisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(unisPnlLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addUniBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(unisPnlLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(uniListBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(unisPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(unisParentPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        unisPnlLayout.setVerticalGroup(
            unisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unisPnlLayout.createSequentialGroup()
                .addGroup(unisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(unisPnlLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(unisLbl))
                    .addComponent(addUniBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(unisPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uniListBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchUnisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unisParentPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        parentPnl.add(unisPnl, "unisPnl");

        appsPnl.setBackground(new java.awt.Color(255, 255, 255));

        appsLbl.setFont(new java.awt.Font("Avenir", 0, 15)); // NOI18N
        appsLbl.setText("Common Applications");

        addAppBtn.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        addAppBtn.setText("+");
        addAppBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppBtnActionPerformed(evt);
            }
        });

        appTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        appTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        appTable.setRowHeight(30);
        appTable.setShowVerticalLines(false);
        appScrollPane.setViewportView(appTable);

        appDltBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        appDltBtn.setText("Delete Selection");
        appDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appDltBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout appsPnlLayout = new javax.swing.GroupLayout(appsPnl);
        appsPnl.setLayout(appsPnlLayout);
        appsPnlLayout.setHorizontalGroup(
            appsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appsPnlLayout.createSequentialGroup()
                .addGroup(appsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appsPnlLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(appsLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAppBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(appsPnlLayout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(appDltBtn))
                    .addGroup(appsPnlLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(appScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        appsPnlLayout.setVerticalGroup(
            appsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appsPnlLayout.createSequentialGroup()
                .addGroup(appsPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appsPnlLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(appsLbl))
                    .addGroup(appsPnlLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(addAppBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(appDltBtn)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        parentPnl.add(appsPnl, "appsPnl");

        scholPnl.setBackground(new java.awt.Color(255, 255, 255));

        scholLbl.setFont(new java.awt.Font("Avenir", 0, 15)); // NOI18N
        scholLbl.setText("Scholarships");

        addScholBtn.setFont(new java.awt.Font("Avenir", 0, 18)); // NOI18N
        addScholBtn.setText("+");
        addScholBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addScholBtnActionPerformed(evt);
            }
        });

        scholTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scholTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scholTable.setRowHeight(30);
        scholTable.setShowVerticalLines(false);
        scholScrollPane.setViewportView(scholTable);

        scholDltBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        scholDltBtn.setText("Delete Selection");
        scholDltBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scholDltBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scholPnlLayout = new javax.swing.GroupLayout(scholPnl);
        scholPnl.setLayout(scholPnlLayout);
        scholPnlLayout.setHorizontalGroup(
            scholPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scholPnlLayout.createSequentialGroup()
                .addGroup(scholPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scholPnlLayout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(scholLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addScholBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(scholPnlLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(scholDltBtn))
                    .addGroup(scholPnlLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(scholScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        scholPnlLayout.setVerticalGroup(
            scholPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scholPnlLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(scholPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scholLbl)
                    .addComponent(addScholBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scholScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scholDltBtn)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        parentPnl.add(scholPnl, "scholPnl");

        exitBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        loadDataBtn.setFont(new java.awt.Font("Avenir", 0, 13)); // NOI18N
        loadDataBtn.setText("Load Data");
        loadDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout basePnlLayout = new javax.swing.GroupLayout(basePnl);
        basePnl.setLayout(basePnlLayout);
        basePnlLayout.setHorizontalGroup(
            basePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basePnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(allTasksBtn)
                    .addComponent(unisBtn)
                    .addComponent(commonBtn)
                    .addComponent(scholBtn)
                    .addGroup(basePnlLayout.createSequentialGroup()
                        .addComponent(exitBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loadDataBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainSepLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(parentPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        basePnlLayout.setVerticalGroup(
            basePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainSepLine)
            .addGroup(basePnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(basePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parentPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(basePnlLayout.createSequentialGroup()
                        .addComponent(allTasksBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unisBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(commonBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scholBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(basePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitBtn)
                            .addComponent(loadDataBtn))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void commonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commonBtnActionPerformed
        CardLayout card = (CardLayout) parentPnl.getLayout(); 
        card.show(parentPnl, "appsPnl"); //switches to apps panel
        
        String[][] apps = new String[user.getCommonApps().size()-1][6]; //creates new 2d array
        for (int i=0; i<user.getCommonApps().size()-1;i++) //loops through all common apps
        {
            apps[i][0]=user.getCommonApps().get(i).getName();
            apps[i][1]=stringFromDate(user.getCommonApps().get(i).getDate());
            apps[i][2]=Integer.toString(user.getCommonApps().get(i).countCurrentTasks());
            apps[i][3]=Integer.toString(user.getCommonApps().get(i).countCompletedTasks());
            apps[i][4]=Integer.toString(user.getCommonApps().get(i).countOverdueTasks());
            apps[i][5]=user.getCommonApps().get(i).getDescription(); //assigns values to each column for each common app
        }
        
        Object[] columns = {"Application","Due Date","Current", "Completed", "Overdue", "Description"}; //assigns column names

        
        appTable.setModel(new javax.swing.table.DefaultTableModel(apps, columns)
        {
    
            public boolean isCellEditable(int row, int column)//overrides isCellEditable method in DefaultTableModel
            {
                return false;//This causes all cells to be not editable
            }
        });
        
        //sets preferred width for all columns
        appTable.getColumnModel().getColumn(0).setPreferredWidth(83);
        appTable.getColumnModel().getColumn(1).setPreferredWidth(66);
        appTable.getColumnModel().getColumn(2).setPreferredWidth(57);
        appTable.getColumnModel().getColumn(3).setPreferredWidth(75);
        appTable.getColumnModel().getColumn(4).setPreferredWidth(64);
        appTable.getColumnModel().getColumn(5).setPreferredWidth(80);

    }//GEN-LAST:event_commonBtnActionPerformed

    private void unisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unisBtnActionPerformed
        CardLayout card = (CardLayout) parentPnl.getLayout();
        card.show(parentPnl, "unisPnl");
        
        Object unis[][] = new String[user.getUnis().size()-1][6];
            for (int i=0; i<user.getUnis().size()-1;i++)
            {
                 unis[i][0]=user.getUnis().get(i+1).getName();
                 unis[i][1]=user.getUnis().get(i+1).getCommonApp();
                 unis[i][2]=Integer.toString(user.getUnis().get(i+1).countCurrentTasks());
                 unis[i][3]=Integer.toString(user.getUnis().get(i+1).countCompletedTasks());
                unis[i][4]=Integer.toString(user.getUnis().get(i+1).countOverdueTasks());
                unis[i][5]=user.getUnis().get(i+1).getDescription();


            }
        
        Object[] columns = {"University","Common App","Current", "Completed", "Overdue", "Description"};
        
        
        
        uniListTable.setModel(new javax.swing.table.DefaultTableModel(unis, columns){
            @Override
            public boolean isCellEditable(int row, int column)
            {
              return false;//This causes all cells to be not editable
            }
        });
        
        uniListTable.getColumnModel().getColumn(0).setPreferredWidth(76);
        uniListTable.getColumnModel().getColumn(1).setPreferredWidth(92);
        uniListTable.getColumnModel().getColumn(2).setPreferredWidth(56);
        uniListTable.getColumnModel().getColumn(3).setPreferredWidth(74);
        uniListTable.getColumnModel().getColumn(4).setPreferredWidth(62);
        uniListTable.getColumnModel().getColumn(5).setPreferredWidth(80);
    }//GEN-LAST:event_unisBtnActionPerformed

    private void upcomingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upcomingBtnActionPerformed
        CardLayout card = (CardLayout) tasksParentPnl.getLayout();
        card.show(tasksParentPnl, "upcomingPnl"); //switches interface to upcoming tasks panel

        Object tasks[][] = new Object[user.countCurrentTasks()][4]; //creates new 2D array(4 columns,1 row per task)
        System.out.println(user.countCurrentTasks());
        
            for (int i=0; i<user.countCurrentTasks();i++)
            {
                Boolean comp = new Boolean(user.getCurrentTasks().get(i).getCompletedStatus());
                tasks[i][0]=comp; //sets first column to show unticked checkbox
                tasks[i][1]=user.getCurrentTasks().get(i).getTask(); //sets second column to show task descriptions
                tasks[i][2]=stringFromDate(user.getCurrentTasks().get(i).getDate()); //sets third column to show due date
                tasks[i][3]=user.getCurrentTasks().get(i).getCategory(); //sets fourth column to show tasks category
            }
        
        Object[] columns = {"  ", "Task","DueDate","Category"}; //sets 4 column headings
        
        upcomingTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
        @Override //override isCellEditable method of DefaultTableModel so not all cells are editable
        public boolean isCellEditable(int row, int column) 
            {
            return column==0; //makes only first column editable (for marking tasks as complete or incomplete)
            }
        });
        //uses existing DefaultTableMode (with method override) to display 2D array information in table
        
        TableColumn tc = upcomingTable.getColumnModel().getColumn(0);
        tc.setCellEditor(upcomingTable.getDefaultEditor(Boolean.class)); //first column can edited using checkboxes
        tc.setCellRenderer(upcomingTable.getDefaultRenderer(Boolean.class)); //sets default renderer for use of checkboxes
        
        upcomingTable.getColumnModel().getColumn(0).setPreferredWidth(25); //sets first column width
        upcomingTable.getColumnModel().getColumn(1).setPreferredWidth(126);//sets second column width
        upcomingTable.getColumnModel().getColumn(2).setPreferredWidth(126);//sets third column width
        upcomingTable.getColumnModel().getColumn(3).setPreferredWidth(126);  //sets fourth column width
    }//GEN-LAST:event_upcomingBtnActionPerformed

    private void completedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completedBtnActionPerformed
        CardLayout card = (CardLayout) tasksParentPnl.getLayout();
        card.show(tasksParentPnl, "completedPnl");
        System.out.println(user.countCompletedTasks());
        Object[][] tasks = new Object[user.countCompletedTasks()][4];
            for (int i=0; i<user.countCompletedTasks(); i++)
            {
                Boolean comp = new Boolean(user.getCompletedTasks().get(i).getCompletedStatus());
                tasks[i][0]=comp; //sets first column to show unticked checkbox
                tasks[i][1]=user.getCompletedTasks().get(i).getTask();
                tasks[i][2]=stringFromDate(user.getCompletedTasks().get(i).getDate());
                tasks[i][3]=user.getCompletedTasks().get(i).getCategory();
            }
        
        String[] columns = {"  ","Task","DueDate","Category"};

        
        completedTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
    @Override
    public boolean isCellEditable(int row, int column)
    {
      return column==0;
    }
  });
    
        TableColumn tc = completedTable.getColumnModel().getColumn(0);
        tc.setCellEditor(completedTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(completedTable.getDefaultRenderer(Boolean.class));
   
        completedTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        completedTable.getColumnModel().getColumn(1).setPreferredWidth(126);
        completedTable.getColumnModel().getColumn(2).setPreferredWidth(126);
        completedTable.getColumnModel().getColumn(3).setPreferredWidth(126);
    }//GEN-LAST:event_completedBtnActionPerformed

    
    
    private void searchUnisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUnisBtnActionPerformed
        CardLayout card = (CardLayout) unisParentPnl.getLayout();
        card.show(unisParentPnl, "searchUnisPnl");
    }//GEN-LAST:event_searchUnisBtnActionPerformed

    private void uniListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniListBtnActionPerformed
        CardLayout card = (CardLayout) unisParentPnl.getLayout();
        card.show(unisParentPnl, "uniListPnl");
                
        String unis[][] = new String[user.getUnis().size()-1][6];
            for (int i=0; i<user.getUnis().size()-1;i++)
            {
                 unis[i][0]=user.getUnis().get(i+1).getName();
                 unis[i][1]=user.getUnis().get(i+1).getCommonApp();
                 unis[i][2]=Integer.toString(user.getUnis().get(i+1).countCurrentTasks());
                 unis[i][3]=Integer.toString(user.getUnis().get(i+1).countCompletedTasks());
                unis[i][4]=Integer.toString(user.getUnis().get(i+1).countOverdueTasks());
                unis[i][5]=user.getUnis().get(i+1).getDescription();


            }
        
        Object[] columns = {"University","Common App","Current", "Completed", "Overdue", "Description"};

        
        uniListTable.setModel(new javax.swing.table.DefaultTableModel(unis, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });
        
        uniListTable.getColumnModel().getColumn(0).setPreferredWidth(76);
        uniListTable.getColumnModel().getColumn(1).setPreferredWidth(92);
        uniListTable.getColumnModel().getColumn(2).setPreferredWidth(56);
        uniListTable.getColumnModel().getColumn(3).setPreferredWidth(74);
        uniListTable.getColumnModel().getColumn(4).setPreferredWidth(62);
        uniListTable.getColumnModel().getColumn(5).setPreferredWidth(80);

    }//GEN-LAST:event_uniListBtnActionPerformed
    /**
     * Saves user data and exits system.
     * @param evt 
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        
        try
        {
            FileOutputStream fileOut = new FileOutputStream("user.txt");//creates file in output stream
            ObjectOutputStream out = new ObjectOutputStream(fileOut);//routes  object into  output stream
            
            out.writeObject(user);//writes user data to file
            out.close(); //closes data path
            fileOut.close(); //closes data path
        }
        catch(IOException i)//catches exception in case file to be written to does not exist
        {
        }
           
        System.exit(0); //closes application
        
    }//GEN-LAST:event_exitBtnActionPerformed

    private void allTasksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTasksBtnActionPerformed
        CardLayout card = (CardLayout) parentPnl.getLayout();
        card.show(parentPnl, "tasksPnl");
    }//GEN-LAST:event_allTasksBtnActionPerformed

    private void scholBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scholBtnActionPerformed
        CardLayout card = (CardLayout) parentPnl.getLayout();
        card.show(parentPnl, "scholPnl");
        
        String[][] schols = new String[user.getScholarships().size()-1][6];
            for (int i=0; i<user.getScholarships().size()-1;i++)
            {
                 schols[i][0]=user.getScholarships().get(i).getName();
                 schols[i][1]=stringFromDate(user.getScholarships().get(i).getDate());
                 schols[i][2]=Integer.toString(user.getScholarships().get(i).countCurrentTasks());
                 schols[i][3]=Integer.toString(user.getScholarships().get(i).countCompletedTasks());
                schols[i][4]=Integer.toString(user.getScholarships().get(i).countOverdueTasks());
                schols[i][5]=user.getScholarships().get(i).getDescription();
            }
        
        Object[] columns = {"Scholarship","Due Date","Current", "Completed", "Overdue", "Description"};

        
        scholTable.setModel(new javax.swing.table.DefaultTableModel(schols, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });
        
        scholTable.getColumnModel().getColumn(0).setPreferredWidth(83);
        scholTable.getColumnModel().getColumn(1).setPreferredWidth(66);
        scholTable.getColumnModel().getColumn(2).setPreferredWidth(57);
        scholTable.getColumnModel().getColumn(3).setPreferredWidth(75);
        scholTable.getColumnModel().getColumn(4).setPreferredWidth(64);
        scholTable.getColumnModel().getColumn(5).setPreferredWidth(80);
    }//GEN-LAST:event_scholBtnActionPerformed

    private void overdueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overdueBtnActionPerformed
        CardLayout card = (CardLayout) tasksParentPnl.getLayout();
        card.show(tasksParentPnl, "overduePnl");
        
        Object[][] tasks = new Object[user.countOverdueTasks()][4];
            for (int i=0; i<user.countOverdueTasks();i++)
            {
                tasks[i][0]=user.getOverdueTasks().get(i).getCompletedStatus();
                tasks[i][1]=user.getOverdueTasks().get(i).getTask();
                tasks[i][2]=stringFromDate(user.getOverdueTasks().get(i).getDate());
                tasks[i][3]=user.getOverdueTasks().get(i).getCategory();
            }
        
        String[] columns = {"  ","Task","DueDate","Category"};

        
        overdueTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
            public boolean isCellEditable(int row, int column)
            {
              return column==0;
            }
        });
        
        TableColumn tc = overdueTable.getColumnModel().getColumn(0);
        tc.setCellEditor(overdueTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(overdueTable.getDefaultRenderer(Boolean.class));
        
        overdueTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        overdueTable.getColumnModel().getColumn(1).setPreferredWidth(126);
        overdueTable.getColumnModel().getColumn(2).setPreferredWidth(126);
        overdueTable.getColumnModel().getColumn(3).setPreferredWidth(126);
    }//GEN-LAST:event_overdueBtnActionPerformed

    private void addTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskBtnActionPerformed
        try {
        createTaskDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        createTaskDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        createTaskDialog.setVisible(true);
        } 
        catch (Exception ex) {
        }
    }//GEN-LAST:event_addTaskBtnActionPerformed

    private void addAppBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppBtnActionPerformed
        try {
        createAppDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        createAppDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        createAppDialog.setVisible(true);
        } 
        catch (Exception ex) {
        }
    }//GEN-LAST:event_addAppBtnActionPerformed

    private void addScholBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addScholBtnActionPerformed
        try {
        createScholDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        createScholDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        createScholDialog.setVisible(true);
        } 
        catch (Exception ex) {
        }
    }//GEN-LAST:event_addScholBtnActionPerformed

    private void nicknameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicknameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nicknameFieldActionPerformed

    private void saveNewUniBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveNewUniBtnActionPerformed
        if(nameField.getText().equals(""))
        {
            try 
            {
                errorDialog.setModalityType(ModalityType.APPLICATION_MODAL);
                errorDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                errorDialog.setAlwaysOnTop(true);
                errorDialog.setVisible(true);
            } 
            catch (Exception ex) {
            }
        }
        else
        {
            this.user.addUni(nameField.getText(), nicknameField.getText(), descriptionField.getText(), commonAppField.getText());
            nameField.setText("");
            nicknameField.setText("");
            descriptionField.setText("");
            commonAppField.setText("");
            createUniDialog.dispose();
            
            String unis[][] = new String[user.getUnis().size()-1][6];
            for (int i=0; i<user.getUnis().size()-1;i++)
            {
                 unis[i][0]=user.getUnis().get(i+1).getName();
                 unis[i][1]=user.getUnis().get(i+1).getCommonApp();
                 unis[i][2]=Integer.toString(user.getUnis().get(i+1).countCurrentTasks());
                 unis[i][3]=Integer.toString(user.getUnis().get(i+1).countCompletedTasks());
                unis[i][4]=Integer.toString(user.getUnis().get(i+1).countOverdueTasks());
                unis[i][5]=user.getUnis().get(i+1).getDescription();


            }
        
            Object[] columns = {"University","Common App","Current", "Completed", "Overdue", "Description"};


            uniListTable.setModel(new javax.swing.table.DefaultTableModel(unis, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });

            uniListTable.getColumnModel().getColumn(0).setPreferredWidth(76);
        uniListTable.getColumnModel().getColumn(1).setPreferredWidth(92);
        uniListTable.getColumnModel().getColumn(2).setPreferredWidth(56);
        uniListTable.getColumnModel().getColumn(3).setPreferredWidth(74);
        uniListTable.getColumnModel().getColumn(4).setPreferredWidth(62);
        uniListTable.getColumnModel().getColumn(5).setPreferredWidth(80);

        }
        
    }//GEN-LAST:event_saveNewUniBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
            createUniDialog.dispose();

    }//GEN-LAST:event_cancelBtnActionPerformed

    private void appNicknameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appNicknameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appNicknameFieldActionPerformed

    private void appSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appSaveBtnActionPerformed
        if(appNameField.getText().equals(""))
        {
            try 
            {
                errorDialog.setModalityType(ModalityType.APPLICATION_MODAL);
                errorDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                errorDialog.setAlwaysOnTop(true);
                errorDialog.setVisible(true);
            } 
            catch (Exception ex) {
            }
        }
        else
        {
            int monthSelection = appMthComboBox.getSelectedIndex(); //make sure gives right month
            int yearSelection = Integer.parseInt((String)appYrComboBox.getSelectedItem());
            int daySelection = Integer.parseInt((String)appDayComboBox.getSelectedItem());
            Date enteredDate = new Date(yearSelection, monthSelection, daySelection);
            user.addApp(appNameField.getText(), appNicknameField.getText(), descriptionField1.getText(), enteredDate);
            appNameField.setText("");
            appNicknameField.setText("");
            descriptionField1.setText("");
            createAppDialog.dispose();

            String[][] apps = new String[user.getCommonApps().size()-1][6];
                for (int i=0; i<user.getCommonApps().size()-1;i++)
                {
                     apps[i][0]=user.getCommonApps().get(i).getName();
                     apps[i][1]=stringFromDate(user.getCommonApps().get(i).getDate());
                     apps[i][2]=Integer.toString(user.getCommonApps().get(i).countCurrentTasks());
                     apps[i][3]=Integer.toString(user.getCommonApps().get(i).countCompletedTasks());
                    apps[i][4]=Integer.toString(user.getCommonApps().get(i).countOverdueTasks());
                    apps[i][5]=user.getCommonApps().get(i).getDescription();
                }

        Object[] columns = {"Application","Due Date","Current", "Completed", "Overdue", "Description"};


            appTable.setModel(new javax.swing.table.DefaultTableModel(apps, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });
            
            appTable.getColumnModel().getColumn(0).setPreferredWidth(83);
        appTable.getColumnModel().getColumn(1).setPreferredWidth(66);
        appTable.getColumnModel().getColumn(2).setPreferredWidth(57);
        appTable.getColumnModel().getColumn(3).setPreferredWidth(75);
        appTable.getColumnModel().getColumn(4).setPreferredWidth(64);
        appTable.getColumnModel().getColumn(5).setPreferredWidth(80);
        }
    }//GEN-LAST:event_appSaveBtnActionPerformed

    private void appCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appCancelBtnActionPerformed
            createAppDialog.dispose();
    }//GEN-LAST:event_appCancelBtnActionPerformed

    private void scholNicknameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scholNicknameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scholNicknameFieldActionPerformed

    private void scholSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scholSaveBtnActionPerformed
        if(scholNameField.getText().equals(""))
        {
            try 
            {
                errorDialog.setModalityType(ModalityType.APPLICATION_MODAL);
                errorDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                errorDialog.setAlwaysOnTop(true);
                errorDialog.setVisible(true);
            } 
            catch (Exception ex) {
            }
        }
        else
        {
            int monthSelection = scholMthComboBox.getSelectedIndex();//make sure gives right month
        int yearSelection = Integer.parseInt((String)scholYrComboBox.getSelectedItem());
        int daySelection = Integer.parseInt((String)scholDayComboBox.getSelectedItem());
        Date enteredDate = new Date(yearSelection, monthSelection, daySelection);
        user.addScholarship(scholNameField.getText(), scholNicknameField.getText(), descriptionField2.getText(), enteredDate);
        scholNameField.setText("");
        scholNicknameField.setText("");
        descriptionField2.setText("");
        createScholDialog.dispose();
        
        String[][] schols = new String[user.getScholarships().size()-1][6];
            for (int i=0; i<user.getScholarships().size()-1;i++)
            {
                 schols[i][0]=user.getScholarships().get(i).getName();
                 schols[i][1]=stringFromDate(user.getScholarships().get(i).getDate());
                 schols[i][2]=Integer.toString(user.getScholarships().get(i).countCurrentTasks());
                 schols[i][3]=Integer.toString(user.getScholarships().get(i).countCompletedTasks());
                schols[i][4]=Integer.toString(user.getScholarships().get(i).countOverdueTasks());
                schols[i][5]=user.getScholarships().get(i).getDescription();
            }
        
        Object[] columns = {"Scholarship","Due Date","Current", "Completed", "Overdue", "Description"};

        
        scholTable.setModel(new javax.swing.table.DefaultTableModel(schols, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });
        
        scholTable.getColumnModel().getColumn(0).setPreferredWidth(83);
        scholTable.getColumnModel().getColumn(1).setPreferredWidth(66);
        scholTable.getColumnModel().getColumn(2).setPreferredWidth(57);
        scholTable.getColumnModel().getColumn(3).setPreferredWidth(75);
        scholTable.getColumnModel().getColumn(4).setPreferredWidth(64);
        scholTable.getColumnModel().getColumn(5).setPreferredWidth(80);
        
        }
    }//GEN-LAST:event_scholSaveBtnActionPerformed

    private void scholCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scholCancelBtnActionPerformed
        createScholDialog.dispose();
    }//GEN-LAST:event_scholCancelBtnActionPerformed

    private void appYrComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appYrComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appYrComboBoxActionPerformed

    private void taskDescFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskDescFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskDescFieldActionPerformed

    private void taskYrComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskYrComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskYrComboBoxActionPerformed

    private void taskCatFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskCatFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskCatFieldActionPerformed

    private void saveTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTaskBtnActionPerformed
        String categoryName = taskCatField.getText(); //accesses data entered in task category text field
        
        /**
         * check to ensure that user has entered a valid category
         * the method getCatFromName() is used to search previously created categories (unis, scholarships, and common
         * apps) to ensure that entered category name is valid
         */
        if(categoryName.equals("") || user.getCatFromName(categoryName)==null || taskDescField.getText().equals(""))
        {
            try 
            {
                errorDialog.setModalityType(ModalityType.APPLICATION_MODAL);//creates dialog displaying error message
                errorDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                errorDialog.setAlwaysOnTop(true); //ensures that error dialog appears in front of current window
                errorDialog.setVisible(true);//makes dialog visible to user
            } 
            catch (Exception ex) {
            }//exception handling
        }
        else //if entered category is valid, task object is created and added to the necessary data structures
        {
            int monthSelection = taskMthComboBox.getSelectedIndex();//months listed in order in combobox, so index gives int value of month
            int yearSelection = Integer.parseInt((String)taskYrComboBox.getSelectedItem()); //entered value converted to int
            int daySelection = Integer.parseInt((String)taskDayComboBox.getSelectedItem()); //entered value converted to int
            Date enteredDate = new Date(yearSelection-1900, monthSelection, daySelection); //Date object created from user input
            String taskDesc = taskDescField.getText(); //accesses task description field
            user.addTask(taskDesc, enteredDate, categoryName);// creates task from user input and adds to applicant
            taskDescField.setText("");
            taskCatField.setText(""); //text fields reset to blank

            createTaskDialog.dispose(); //closes create task window
            
            /**
             * refreshes task panel to reflect creation of new task
             */
            CardLayout card = (CardLayout) tasksParentPnl.getLayout();
            card.show(tasksParentPnl, "upcomingPnl"); 

            Object tasks[][] = new Object[user.countCurrentTasks()][4]; //creates new 2D array(4 columns,1 row per task)
            for (int i=0; i<user.countCurrentTasks();i++)
            {
                Boolean comp = new Boolean(user.getCurrentTasks().get(i).getCompletedStatus());
                tasks[i][0]=comp; //sets first column to show unticked checkbox
                tasks[i][1]=user.getCurrentTasks().get(i).getTask(); //sets second column to show task descriptions
                tasks[i][2]=stringFromDate(user.getCurrentTasks().get(i).getDate()); //sets third column to show due date
                tasks[i][3]=user.getCurrentTasks().get(i).getCategory(); //sets fourth column to show tasks category
            }
        
            Object[] columns = {"  ", "Task","DueDate","Category"}; //sets 4 column headings
            upcomingTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
            @Override
            public boolean isCellEditable(int row, int column)
                {
                return column==0; //makes only checkbox column editable for marking tasks as complete or incomplete
                }
            });
            //uses existing DefaultTableMode to display 2D array information in table

            TableColumn tc = upcomingTable.getColumnModel().getColumn(0);
            tc.setCellEditor(upcomingTable.getDefaultEditor(Boolean.class));
            tc.setCellRenderer(upcomingTable.getDefaultRenderer(Boolean.class));
            
            upcomingTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            upcomingTable.getColumnModel().getColumn(1).setPreferredWidth(126);
            upcomingTable.getColumnModel().getColumn(2).setPreferredWidth(126);
            upcomingTable.getColumnModel().getColumn(3).setPreferredWidth(126);
        }
    }//GEN-LAST:event_saveTaskBtnActionPerformed

    private void cancelTaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTaskBtnActionPerformed
        createTaskDialog.dispose();
    }//GEN-LAST:event_cancelTaskBtnActionPerformed

    private void errorOKBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorOKBtnActionPerformed
        errorDialog.dispose();
    }//GEN-LAST:event_errorOKBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        ArrayList<University> srchResults = user.searchUnis(searchField.getText());//searches unis for entered search term
        
        String results[][] = new String[srchResults.size()][6];//creates new 2D array (2 columns, 1 row per search result)
            for (int i=0; i<srchResults.size();i++)
            {
                 results[i][0]=srchResults.get(i).getName(); 
                 results[i][1]=srchResults.get(i).getCommonApp();
                 results[i][2]=Integer.toString(srchResults.get(i).countCurrentTasks());
                 results[i][3]=Integer.toString(srchResults.get(i).countCompletedTasks());
                results[i][4]=Integer.toString(srchResults.get(i).countOverdueTasks());
                results[i][5]=srchResults.get(i).getDescription();
            } // sets values of each column to necessary university data
        
        Object[] columns = {"University","Common Application","Current Tasks", "Completed Tasks", "Overdue Tasks", "Description"};
        //sets 6 column headings
        
        searchTable.setModel(new javax.swing.table.DefaultTableModel(results, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  }); //makes use of DefaultTableModel
    }//GEN-LAST:event_searchBtnActionPerformed

    private void uniListDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniListDltBtnActionPerformed
        int row = uniListTable.getSelectedRow();
        if(row==-1)
        {
        } else {
            user.delete(user.getUnis().get(row+1));
            
            String unis[][] = new String[user.getUnis().size()-1][6];
            for (int i=0; i<user.getUnis().size()-1;i++)
            {
                unis[i][0]=user.getUnis().get(i+1).getName();
                unis[i][1]=user.getUnis().get(i+1).getCommonApp();
                unis[i][2]=Integer.toString(user.getUnis().get(i+1).countCurrentTasks());
                unis[i][3]=Integer.toString(user.getUnis().get(i+1).countCompletedTasks());
                unis[i][4]=Integer.toString(user.getUnis().get(i+1).countOverdueTasks());
                unis[i][5]=user.getUnis().get(i+1).getDescription();
                
                
            }
            
            Object[] columns = {"University","Common App","Current", "Completed", "Overdue", "Description"};
            
            
            uniListTable.setModel(new javax.swing.table.DefaultTableModel(unis, columns){
                public boolean isCellEditable(int row, int column)
                {
                    return false;//This causes all cells to be not editable
                }
            });
            
            uniListTable.getColumnModel().getColumn(0).setPreferredWidth(76);
            uniListTable.getColumnModel().getColumn(1).setPreferredWidth(92);
            uniListTable.getColumnModel().getColumn(2).setPreferredWidth(56);
            uniListTable.getColumnModel().getColumn(3).setPreferredWidth(74);
            uniListTable.getColumnModel().getColumn(4).setPreferredWidth(62);
            uniListTable.getColumnModel().getColumn(5).setPreferredWidth(80);
        }
    }//GEN-LAST:event_uniListDltBtnActionPerformed

    private void searchDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDltBtnActionPerformed
        int row = searchTable.getSelectedRow();
        if(row!=-1)
        {
        user.delete(user.searchUnis(searchField.getText()).get(row));
        
        ArrayList<University> srchResults = user.searchUnis(searchField.getText());
        
        String results[][] = new String[srchResults.size()][6];
            for (int i=0; i<srchResults.size();i++)
            {
                results[i][0]=srchResults.get(i).getName();
                results[i][1]=srchResults.get(i).getCommonApp();
                results[i][2]=Integer.toString(srchResults.get(i).countCurrentTasks());
                results[i][3]=Integer.toString(srchResults.get(i).countCompletedTasks());
                results[i][4]=Integer.toString(srchResults.get(i).countOverdueTasks());
                results[i][5]=srchResults.get(i).getDescription();


            }
        
        Object[] columns = {"University","Common Application","Current Tasks", "Completed Tasks", "Overdue Tasks", "Description"};

        searchTable.setModel(new javax.swing.table.DefaultTableModel(results, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });
        }
    }//GEN-LAST:event_searchDltBtnActionPerformed

    private void upcomingDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upcomingDltBtnActionPerformed
        int row = upcomingTable.getSelectedRow();
        if(row==-1)
        {
            
        }
        else
        {
            user.delete(user.getCurrentTasks().get(row));

            Object tasks[][] = new Object[user.countCurrentTasks()][4]; //creates new 2D array(4 columns,1 row per task)

            for (int i=0; i<user.countCurrentTasks();i++)
                {
                    Boolean comp = new Boolean(user.getCurrentTasks().get(i).getCompletedStatus());
                    tasks[i][0]=comp; //sets first column to show unticked checkbox
                    tasks[i][1]=user.getCurrentTasks().get(i).getTask(); //sets second column to show task descriptions
                    tasks[i][2]=stringFromDate(user.getCurrentTasks().get(i).getDate()); //sets third column to show due date
                    tasks[i][3]=user.getCurrentTasks().get(i).getCategory(); //sets fourth column to show tasks category
                }

            Object[] columns = {"  ", "Task","DueDate","Category"}; //sets 4 column headings
            upcomingTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
            @Override
            public boolean isCellEditable(int row, int column)
                {
                return column==0; //makes only checkbox column editable for marking tasks as complete or incomplete
                }
            });
            //uses existing DefaultTableMode to display 2D array information in table

            TableColumn tc = upcomingTable.getColumnModel().getColumn(0);
            tc.setCellEditor(upcomingTable.getDefaultEditor(Boolean.class));
            tc.setCellRenderer(upcomingTable.getDefaultRenderer(Boolean.class));

            upcomingTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            upcomingTable.getColumnModel().getColumn(1).setPreferredWidth(126);
            upcomingTable.getColumnModel().getColumn(2).setPreferredWidth(126);
            upcomingTable.getColumnModel().getColumn(3).setPreferredWidth(126);
        }
    }//GEN-LAST:event_upcomingDltBtnActionPerformed

    private void completedDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completedDltBtnActionPerformed
        int row = completedTable.getSelectedRow();
        if(row!=-1)
        {
            user.delete(user.getCompletedTasks().get(row));
        
        Object[][] tasks = new Object[user.countCompletedTasks()][4];
            for (int i=0; i<user.countCompletedTasks(); i++)
            {
                Boolean comp = new Boolean(user.getCompletedTasks().get(i).getCompletedStatus());
                tasks[i][0]=comp; //sets first column to show unticked checkbox
                tasks[i][1]=user.getCompletedTasks().get(i).getTask();
                tasks[i][2]=stringFromDate(user.getCompletedTasks().get(i).getDate());
                tasks[i][3]=user.getCompletedTasks().get(i).getCategory();
            }
        
        String[] columns = {"  ","Task","DueDate","Category"};

        
        completedTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
    @Override
    public boolean isCellEditable(int row, int column)
    {
      return column==0;
    }
  });
    
        TableColumn tc = completedTable.getColumnModel().getColumn(0);
        tc.setCellEditor(completedTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(completedTable.getDefaultRenderer(Boolean.class));

        completedTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        completedTable.getColumnModel().getColumn(1).setPreferredWidth(126);
        completedTable.getColumnModel().getColumn(2).setPreferredWidth(126);
        completedTable.getColumnModel().getColumn(3).setPreferredWidth(126);
        
        }
    }//GEN-LAST:event_completedDltBtnActionPerformed

    private void overdueDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overdueDltBtnActionPerformed
        int row = overdueTable.getSelectedRow();
        if(row!=-1)
        {
            user.delete(user.getOverdueTasks().get(row));
        
        Object[][] tasks = new Object[user.countOverdueTasks()][4];
        for (int i=0; i<user.countCompletedTasks(); i++)
        {
            Boolean comp = new Boolean(user.getOverdueTasks().get(i).getCompletedStatus());
            tasks[i][0]=comp;
            tasks[i][1]=user.getOverdueTasks().get(i).getTask();
            tasks[i][2]=stringFromDate(user.getOverdueTasks().get(i).getDate());
            tasks[i][3]=user.getOverdueTasks().get(i).getCategory();
        }
        String[] columns = {"  ","Task","DueDate","Category"};
        overdueTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return column==0;
            }
        });
        TableColumn tc = overdueTable.getColumnModel().getColumn(0);
        tc.setCellEditor(overdueTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(overdueTable.getDefaultRenderer(Boolean.class));
        overdueTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        overdueTable.getColumnModel().getColumn(1).setPreferredWidth(126);
        overdueTable.getColumnModel().getColumn(2).setPreferredWidth(126);
        overdueTable.getColumnModel().getColumn(3).setPreferredWidth(126);
        }
    }//GEN-LAST:event_overdueDltBtnActionPerformed

    private void appDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appDltBtnActionPerformed
        int row = appTable.getSelectedRow();
        if(row!=-1)
        {
            user.delete(user.getCommonApps().get(row));
        
        
        String[][] apps = new String[user.getCommonApps().size()-1][6];
            for (int i=0; i<user.getCommonApps().size()-1;i++)
            {
                 apps[i][0]=user.getCommonApps().get(i).getName();
                 apps[i][1]=stringFromDate(user.getCommonApps().get(i).getDate());
                 apps[i][2]=Integer.toString(user.getCommonApps().get(i).countCurrentTasks());
                 apps[i][3]=Integer.toString(user.getCommonApps().get(i).countCompletedTasks());
                apps[i][4]=Integer.toString(user.getCommonApps().get(i).countOverdueTasks());
                apps[i][5]=user.getCommonApps().get(i).getDescription();
            }
        
        Object[] columns = {"Application","Due Date","Current", "Completed", "Overdue", "Description"};

        appTable.setModel(new javax.swing.table.DefaultTableModel(apps, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });
        
        appTable.getColumnModel().getColumn(0).setPreferredWidth(83);
        appTable.getColumnModel().getColumn(1).setPreferredWidth(66);
        appTable.getColumnModel().getColumn(2).setPreferredWidth(57);
        appTable.getColumnModel().getColumn(3).setPreferredWidth(75);
        appTable.getColumnModel().getColumn(4).setPreferredWidth(64);
        appTable.getColumnModel().getColumn(5).setPreferredWidth(80);
        
        }
    }//GEN-LAST:event_appDltBtnActionPerformed

    private void scholDltBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scholDltBtnActionPerformed
        int row = scholTable.getSelectedRow();
        if(row!=-1)
        {    
            user.delete(user.getScholarships().get(row));
        
        String[][] schols = new String[user.getScholarships().size()-1][6];
            for (int i=0; i<user.getScholarships().size()-1;i++)
            {
                 schols[i][0]=user.getScholarships().get(i).getName();
                 schols[i][1]=stringFromDate(user.getScholarships().get(i).getDate());
                 schols[i][2]=Integer.toString(user.getScholarships().get(i).countCurrentTasks());
                 schols[i][3]=Integer.toString(user.getScholarships().get(i).countCompletedTasks());
                schols[i][4]=Integer.toString(user.getScholarships().get(i).countOverdueTasks());
                schols[i][5]=user.getScholarships().get(i).getDescription();
            }
        
        Object[] columns = {"Scholarship","Due Date","Current", "Completed", "Overdue", "Description"};

        
        scholTable.setModel(new javax.swing.table.DefaultTableModel(schols, columns){
    public boolean isCellEditable(int row, int column)
    {
      return false;//This causes all cells to be not editable
    }
  });
        
        scholTable.getColumnModel().getColumn(0).setPreferredWidth(83);
        scholTable.getColumnModel().getColumn(1).setPreferredWidth(66);
        scholTable.getColumnModel().getColumn(2).setPreferredWidth(57);
        scholTable.getColumnModel().getColumn(3).setPreferredWidth(75);
        scholTable.getColumnModel().getColumn(4).setPreferredWidth(64);
        scholTable.getColumnModel().getColumn(5).setPreferredWidth(80);
        }
    }//GEN-LAST:event_scholDltBtnActionPerformed

    private void loadDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataBtnActionPerformed
        
        try{
            FileInputStream fileIn = new FileInputStream("user.txt");//creates input stream for file
            ObjectInputStream in = new ObjectInputStream(fileIn);//routes input from file to object input stream
            user = (Applicant) in.readObject();//reads input from file, casts to Applicant object, assigns to user field
            in.close();//closes input stream.
            fileIn.close();//closes file data stream.
        }catch(IOException i)//handles exception in case file to be read from does not exist (eg. when app is first used)
        {
        }
        catch(ClassNotFoundException c)//catches class not found exception (less likely to be necessary but good precaution 
        {
        }
    }//GEN-LAST:event_loadDataBtnActionPerformed

    private void upcomingSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upcomingSaveBtnActionPerformed
        ArrayList<Task> tasklist = user.getCurrentTasks();

        for (int i = 0; i<upcomingTable.getRowCount(); i++)
        {
           user.getTasks().get(user.getTasks().indexOf(tasklist.get(i))).setStatus(((Boolean)upcomingTable.getValueAt(i, 0)).booleanValue());
           System.out.println("completion updated");
        }
        
        Object tasks[][] = new Object[user.countCurrentTasks()][4]; //creates new 2D array(4 columns,1 row per task)
                   System.out.println("2d array created");
    
        for (int i=0; i<user.countCurrentTasks();i++)
            {
                Boolean comp = new Boolean(user.getCurrentTasks().get(i).getCompletedStatus());
                tasks[i][0]=comp; //sets first column to show unticked checkbox
                tasks[i][1]=user.getCurrentTasks().get(i).getTask(); //sets second column to show task descriptions
                tasks[i][2]=stringFromDate(user.getCurrentTasks().get(i).getDate()); //sets third column to show due date
                tasks[i][3]=user.getCurrentTasks().get(i).getCategory(); //sets fourth column to show tasks category
            }
        
                   System.out.println("table values assigned");

        
        Object[] columns = {"  ", "Task","DueDate","Category"}; //sets 4 column headings
        upcomingTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
        @Override
        public boolean isCellEditable(int row, int column)
            {
            return column==0; //makes only checkbox column editable for marking tasks as complete or incomplete
            }
        });
        //uses existing DefaultTableMode to display 2D array information in table
        
        TableColumn tc = upcomingTable.getColumnModel().getColumn(0);
        tc.setCellEditor(upcomingTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(upcomingTable.getDefaultRenderer(Boolean.class));

        upcomingTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        upcomingTable.getColumnModel().getColumn(1).setPreferredWidth(126);
        upcomingTable.getColumnModel().getColumn(2).setPreferredWidth(126);
        upcomingTable.getColumnModel().getColumn(3).setPreferredWidth(126);
    }//GEN-LAST:event_upcomingSaveBtnActionPerformed

    private void completedSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completedSaveBtnActionPerformed
        ArrayList<Task> tasklist = user.getCompletedTasks();
        
        for (int i = 0; i<completedTable.getRowCount(); i++)
        {
            user.getTasks().get(user.getTasks().indexOf(tasklist.get(i))).setStatus(((Boolean)completedTable.getValueAt(i, 0)).booleanValue());
           
        }
        
        Object[][] tasks = new Object[user.countCompletedTasks()][4];
            for (int i=0; i<user.countCompletedTasks(); i++)
            {
                Boolean comp = new Boolean(user.getCompletedTasks().get(i).getCompletedStatus());
                tasks[i][0]=comp; //sets first column to show unticked checkbox
                tasks[i][1]=user.getCompletedTasks().get(i).getTask();
                tasks[i][2]=stringFromDate(user.getCompletedTasks().get(i).getDate());
                tasks[i][3]=user.getCompletedTasks().get(i).getCategory();
            }
        
        String[] columns = {"  ","Task","DueDate","Category"};

        
        completedTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
            @Override
            public boolean isCellEditable(int row, int column)
                {
            return column==0;
            }
        });
    
        TableColumn tc = completedTable.getColumnModel().getColumn(0);
        tc.setCellEditor(completedTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(completedTable.getDefaultRenderer(Boolean.class));

        completedTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        completedTable.getColumnModel().getColumn(1).setPreferredWidth(126);
        completedTable.getColumnModel().getColumn(2).setPreferredWidth(126);
        completedTable.getColumnModel().getColumn(3).setPreferredWidth(126);
        
    }//GEN-LAST:event_completedSaveBtnActionPerformed

    private void overdueSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overdueSaveBtnActionPerformed
        ArrayList<Task> tasklist = user.getOverdueTasks();
        
        for (int i = 0; i<overdueTable.getRowCount(); i++)
        {
            user.getTasks().get(user.getTasks().indexOf(tasklist.get(i))).setStatus(((Boolean)overdueTable.getValueAt(i, 0)).booleanValue());
           
        }
        
        Object[][] tasks = new Object[user.countOverdueTasks()][4];
            for (int i=0; i<user.countOverdueTasks(); i++)
            {
                Boolean comp = new Boolean(user.getOverdueTasks().get(i).getCompletedStatus());
                tasks[i][0]=comp;
                tasks[i][1]=user.getOverdueTasks().get(i).getTask();
                tasks[i][2]=stringFromDate(user.getOverdueTasks().get(i).getDate());
                tasks[i][3]=user.getOverdueTasks().get(i).getCategory();
            }
        
        String[] columns = {"  ","Task","DueDate","Category"};

        
        overdueTable.setModel(new javax.swing.table.DefaultTableModel(tasks, columns){
            @Override
            public boolean isCellEditable(int row, int column)
                {
            return column==0;
            }
        });
    
        TableColumn tc = overdueTable.getColumnModel().getColumn(0);
        tc.setCellEditor(overdueTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(overdueTable.getDefaultRenderer(Boolean.class));

        overdueTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        overdueTable.getColumnModel().getColumn(1).setPreferredWidth(126);
        overdueTable.getColumnModel().getColumn(2).setPreferredWidth(126);
        overdueTable.getColumnModel().getColumn(3).setPreferredWidth(126);
    }//GEN-LAST:event_overdueSaveBtnActionPerformed

    private void commonAppFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commonAppFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_commonAppFieldActionPerformed

    private void addUniBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUniBtnActionPerformed
        try {
            createUniDialog.setModalityType(ModalityType.APPLICATION_MODAL);
            createUniDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            createUniDialog.setVisible(true);
        }
        catch (Exception ex) {
        }
    }//GEN-LAST:event_addUniBtnActionPerformed

    private String stringFromDate(Date date)
    {
        return (date.getDate()+"/"+ (date.getMonth()+1)+"/"+(date.getYear()%100));
        
    }
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppAppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            
            new AppAppGUI().setVisible(true);
        });
        

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAppBtn;
    private javax.swing.JButton addScholBtn;
    private javax.swing.JButton addTaskBtn;
    private javax.swing.JButton addUniBtn;
    private javax.swing.JButton allTasksBtn;
    private javax.swing.JLabel allTasksLbl;
    private javax.swing.JButton appCancelBtn;
    private javax.swing.JComboBox<String> appDayComboBox;
    private javax.swing.JScrollPane appDecriptionScrollPane;
    private javax.swing.JLabel appDescLbl;
    private javax.swing.JLabel appDialogLbl;
    private javax.swing.JPanel appDialogPnl;
    private javax.swing.JButton appDltBtn;
    private javax.swing.JLabel appDueDateLbl;
    private javax.swing.JComboBox<String> appMthComboBox;
    private javax.swing.JTextField appNameField;
    private javax.swing.JLabel appNameLbl;
    private javax.swing.JTextField appNicknameField;
    private javax.swing.JLabel appNicknameLbl;
    private javax.swing.JButton appSaveBtn;
    private javax.swing.JScrollPane appScrollPane;
    private javax.swing.JTable appTable;
    private javax.swing.JComboBox<String> appYrComboBox;
    private javax.swing.JLabel appsLbl;
    private javax.swing.JPanel appsPnl;
    private javax.swing.JPanel basePnl;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton cancelTaskBtn;
    private javax.swing.JTextField commonAppField;
    private javax.swing.JLabel commonAppLbl;
    private javax.swing.JButton commonBtn;
    private javax.swing.JButton completedBtn;
    private javax.swing.JButton completedDltBtn;
    private javax.swing.JPanel completedPnl;
    private javax.swing.JButton completedSaveBtn;
    private javax.swing.JScrollPane completedScrollPane;
    private javax.swing.JTable completedTable;
    private javax.swing.JDialog createAppDialog;
    private javax.swing.JDialog createScholDialog;
    private javax.swing.JDialog createTaskDialog;
    private javax.swing.JDialog createUniDialog;
    private javax.swing.JScrollPane decriptionScrollPane;
    private javax.swing.JLabel descLbl;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JTextArea descriptionField1;
    private javax.swing.JTextArea descriptionField2;
    private javax.swing.JDialog errorDialog;
    private javax.swing.JButton errorOKBtn;
    private javax.swing.JPanel errorPnl;
    private javax.swing.JLabel errorText;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton loadDataBtn;
    private javax.swing.JSeparator mainSepLine;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nicknameField;
    private javax.swing.JLabel nicknameLbl;
    private javax.swing.JButton overdueBtn;
    private javax.swing.JButton overdueDltBtn;
    private javax.swing.JPanel overduePnl;
    private javax.swing.JButton overdueSaveBtn;
    private javax.swing.JScrollPane overdueScrollPane;
    private javax.swing.JTable overdueTable;
    private javax.swing.JPanel parentPnl;
    private javax.swing.JButton saveNewUniBtn;
    private javax.swing.JButton saveTaskBtn;
    private javax.swing.JLabel schoNameLbl;
    private javax.swing.JButton scholBtn;
    private javax.swing.JButton scholCancelBtn;
    private javax.swing.JComboBox<String> scholDayComboBox;
    private javax.swing.JLabel scholDescLbl;
    private javax.swing.JScrollPane scholDescriptionScrollPane;
    private javax.swing.JLabel scholDialogLbl;
    private javax.swing.JPanel scholDialogPnl;
    private javax.swing.JButton scholDltBtn;
    private javax.swing.JLabel scholDueDateLbl;
    private javax.swing.JLabel scholLbl;
    private javax.swing.JComboBox<String> scholMthComboBox;
    private javax.swing.JTextField scholNameField;
    private javax.swing.JTextField scholNicknameField;
    private javax.swing.JLabel scholNicknameLbl;
    private javax.swing.JPanel scholPnl;
    private javax.swing.JButton scholSaveBtn;
    private javax.swing.JScrollPane scholScrollPane;
    private javax.swing.JTable scholTable;
    private javax.swing.JComboBox<String> scholYrComboBox;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton searchDltBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTable searchTable;
    private javax.swing.JButton searchUnisBtn;
    private javax.swing.JPanel searchUnisPnl;
    private javax.swing.JScrollPane srchScrollPane;
    private javax.swing.JTextField taskCatField;
    private javax.swing.JLabel taskCatLbl;
    private javax.swing.JComboBox<String> taskDayComboBox;
    private javax.swing.JTextField taskDescField;
    private javax.swing.JLabel taskDescLbl;
    private javax.swing.JLabel taskDialogLbl;
    private javax.swing.JPanel taskDialogPnl;
    private javax.swing.JLabel taskDueDateLbl;
    private javax.swing.JComboBox<String> taskMthComboBox;
    private javax.swing.JComboBox<String> taskYrComboBox;
    private javax.swing.JPanel tasksParentPnl;
    private javax.swing.JPanel tasksPnl;
    private javax.swing.JLabel uniDialogLbl;
    private javax.swing.JPanel uniDialogPnl;
    private javax.swing.JButton uniListBtn;
    private javax.swing.JButton uniListDltBtn;
    private javax.swing.JPanel uniListPnl;
    private javax.swing.JScrollPane uniListScrollPane;
    private javax.swing.JTable uniListTable;
    private javax.swing.JButton unisBtn;
    private javax.swing.JLabel unisLbl;
    private javax.swing.JPanel unisParentPnl;
    private javax.swing.JPanel unisPnl;
    private javax.swing.JButton upcomingBtn;
    private javax.swing.JButton upcomingDltBtn;
    private javax.swing.JPanel upcomingPnl;
    private javax.swing.JButton upcomingSaveBtn;
    private javax.swing.JScrollPane upcomingScrollPane;
    private javax.swing.JTable upcomingTable;
    // End of variables declaration//GEN-END:variables
}
